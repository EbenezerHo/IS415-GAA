---
title: "In class Exercise 03"
execute: 
  warning: false # show warnings
  eval: true # evaluate the code
  echo: true # show the code
date: "`r Sys.Date()`"
---

# getting started woo

## import data and load packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse)
```

```{r}
childcare_sf <- read_rds("data/rds/childcare_sf.rds") 
mpsz_sf <- read_rds("data/rds/mpsz_sf.rds") 
sg_sf <- read_rds("data/rds/sg_sf.rds") 
```

```{r}
st_crs(mpsz_sf)
```

## changing mpsz_sf to 3414

```{r}
mpsz_sf <- st_transform(mpsz_sf, 3414)
```

checking

```{r}
st_crs(mpsz_sf)
```

checking sg_sf

```{r}
st_crs(sg_sf)
```

## mapping geospatial dataset

```{r}
tm_shape(mpsz_sf)+
  tm_polygons()+
  tm_shape(childcare_sf)+
  tm_dots()
```

# geospatial data wrangling

## Converting sf data frames to sp’s Spatial\* class

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

## display the information of the above 3 spatial classes

```{r}
childcare
mpsz
sg
```

## Converting the Spatial\* class into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
sg_sp
```

## Converting the generic sp format into spatstat’s ppp format

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

### remove duplicate

since we already know that in part 1, there are duplicates, we'll skippdy skip

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

## creating owin

```{r}
sg_owin <- as(sg_sp, "owin")
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

## Combining point events object and owin object

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

## extracting study area

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

## plotting target planning areas

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

## Converting the spatial point data frame into generic sp format

```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

## creating owin

```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

## Combining childcare points and the study area

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, rescale() function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

# Second-order Spatial Point Patterns Analysis

## Analysing Spatial Point Process Using G-Function

cck

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

Performing Complete Spatial Randomness Test

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 49)
```

```{r}
plot(G_CK.csr)
```

tampines

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 49)
```

```{r}
plot(G_tm.csr)
```

# Analysing Spatial Point Process Using F-Function

cck

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

## Performing Complete Spatial Randomness Test

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 49)
```

```{r}
plot(F_CK.csr)
```

tampines

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

## randomness test

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 49)
```

```{r}
plot(F_tm.csr)
```

# Analysing Spatial Point Process Using K-Function

cck

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

randomness test

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 49, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

tampines

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

randomness test

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 49, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

# Analysing Spatial Point Process Using L-Function

cck

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 49, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

tampines

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 49, rank = 1, glocal=TRUE)

```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
