{
  "hash": "1e11dbf1a27f8a0627d443af9de9cb98",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 03\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\ndate: \"2024-03-24\"\n---\n\n\n# 1.0 Data preparation and wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, corrplot, spdep, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, psych, GGally, sp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npci <- read_csv(\"data/pci_2021.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvn <- st_read(dsn = \"data/\", \n                   layer = \"vnm_admbnda_adm1_gov_20201027\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `vnm_admbnda_adm1_gov_20201027' from data source \n  `C:\\EbenezerHo\\IS415-GAA\\Take-home_Ex\\Take-home_Ex03\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 63 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 102.144 ymin: 7.180931 xmax: 117.8355 ymax: 23.39221\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pci)\n```\n:::\n\n\nlets rename the columns to make them more readable\n\n\n::: {.cell}\n\n```{.r .cell-code}\npci <- pci %>% \n  rename(`overall_index` = `Sub-Index 10: Law & Order`, \n         `security_ind` = `Good security situation in the province (%)`,\n         `theft_ind` = `Victim of theft or break-in last year (%)`,\n         `police_ind` = `Local police handle firm's case effectively (%)`,\n         `gangster_ind` = `Pay money to gangsters groups (%)`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(pci$Province)\n```\n:::\n\n\nWe notice that some province names are not consistent with the map. We need to fix this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(vn$ADM1_EN)\n```\n:::\n\n\nshow names that are in pci but not in vn\n\n\n::: {.cell}\n\n```{.r .cell-code}\npci %>% \n  filter(!Province %in% vn$ADM1_EN) %>% \n  select(Province)\n```\n:::\n\n\nlet's replace these names in pci with the names in vn for us to be able to join the two datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\npci <- pci %>% \n  mutate(Province = case_when(\n    Province == \"BRVT\" ~ \"Ba Ria - Vung Tau\",\n    Province == \"Can Tho\" ~ \"Can Tho city\",\n    Province == \"Da Nang\" ~ \"Da Nang city\",\n    Province == \"HCMC\" ~ \"Ho Chi Minh city\",\n    Province == \"Hai Phong\" ~ \"Hai Phong city\",\n    Province == \"TT-Hue\" ~ \"Thua Thien Hue\",\n    TRUE ~ Province\n  ))\n```\n:::\n\n\nlets check again\n\n\n::: {.cell}\n\n```{.r .cell-code}\npci %>% \n  filter(!Province %in% vn$ADM1_EN) %>% \n  select(Province)\n```\n:::\n\n\nLooks like we're good to go!\n\nwe first need to remove the % sign in the last 4 columns of pci and convert it to integer datatype\n\n\n::: {.cell}\n\n```{.r .cell-code}\npci <- pci %>% \n  mutate(across(ends_with(\"ind\"), ~as.integer(str_remove(., \"%\"))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pci)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(pci, \"data/rds/pci.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npci <- read_rds(\"data/rds/pci.rds\")\n```\n:::\n\n\n# 2.0 Clustering using SKATER method\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncluster_vars.cor = cor(pci[,3:7])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](the03_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvn_pci <- vn %>% \n  left_join(pci, by = c(\"ADM1_EN\" = \"Province\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nslt_vn <- select(vn_pci, c(ADM1_EN, overall_index, security_ind, theft_ind, police_ind, gangster_ind))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nslt_vn <- st_drop_geometry(slt_vn)\n```\n:::\n\n\ncheck the datatype of vn\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 63 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 102.144 ymin: 7.180931 xmax: 117.8355 ymax: 23.39221\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   Shape_Leng Shape_Area           ADM1_EN           ADM1_VI ADM1_PCODE\n1    2.900742 0.29203991          An Giang          An Giang      VN805\n2    3.419187 0.16303276 Ba Ria - Vung Tau Bà Rịa - Vũng Tàu      VN717\n3    4.514786 0.33874811         Bac Giang         Bắc Giang      VN221\n4    4.207590 0.42559833           Bac Kan           Bắc Kạn      VN207\n5    2.879202 0.20404993          Bac Lieu          Bạc Liêu      VN821\n6    1.685751 0.07149842          Bac Ninh          Bắc Ninh      VN106\n7    2.164654 0.19391967           Ben Tre           Bến Tre      VN811\n8    4.272459 0.50818750         Binh Dinh         Bình Định      VN507\n9    3.869973 0.22299221        Binh Duong        Bình Dương      VN711\n10   5.308304 0.56929781        Binh Phuoc        Bình Phước      VN707\n   ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1VI ADM1ALT2VI  ADM0_EN  ADM0_VI\n1      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n2      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n3      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n4      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n5      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n6      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n7      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n8      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n9      <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n10     <NA>       <NA>       <NA>       <NA>       <NA> Viet Nam Việt Nam\n   ADM0_PCODE       date    validOn validTo                       geometry\n1          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((105.1172 10...\n2          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((106.5574 8....\n3          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((106.163 21....\n4          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((105.7415 22...\n5          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((105.2989 9....\n6          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((106.0008 21...\n7          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((106.4089 10...\n8          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((109.3701 13...\n9          VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((106.4419 11...\n10         VN 2019-10-01 2020-01-03    <NA> MULTIPOLYGON (((107.2064 12...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvn_sp <- as_Spatial(vn)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvn.nb <- poly2nb(vn_sp)\nsummary(vn.nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 63 \nNumber of nonzero links: 270 \nPercentage nonzero weights: 6.802721 \nAverage number of links: 4.285714 \nLink number distribution:\n\n 2  3  4  5  6  7  8 \n 7 12 19 11 10  3  1 \n7 least connected regions:\n12 15 18 25 41 46 50 with 2 links\n1 most connected region:\n24 with 8 links\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vn_sp, \n     border=grey(.5))\nplot(vn.nb, \n     coordinates(vn_sp), \n     col=\"blue\", \n     add=TRUE)\n```\n\n::: {.cell-output-display}\n![](the03_files/figure-html/unnamed-chunk-22-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlcosts <- nbcosts(vn.nb, slt_vn)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvn.w <- nb2listw(vn.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(vn.w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 63 \nNumber of nonzero links: 270 \nPercentage nonzero weights: 6.802721 \nAverage number of links: 4.285714 \nLink number distribution:\n\n 2  3  4  5  6  7  8 \n 7 12 19 11 10  3  1 \n7 least connected regions:\n12 15 18 25 41 46 50 with 2 links\n1 most connected region:\n24 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1      S2\nB 63 3969 4049.519 158688.5 1235388\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvn.mst <- mstree(vn.w)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(vn.mst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mst\"    \"matrix\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(vn.mst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 62  3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vn_sp, border=gray(.5))\nplot.mst(vn.mst, \n         coordinates(vn_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n```\n\n::: {.cell-output-display}\n![](the03_files/figure-html/unnamed-chunk-28-1.png){width=1920}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrow.names(slt_vn) <- slt_vn$\"ADM1_EN\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nslt_vn <- select(slt_vn, -ADM1_EN)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclust6 <- spdep::skater(edges = vn.mst[,1:2], \n                 data = slt_vn, \n                 method = \"euclidean\", \n                 ncuts = 5)\n```\n:::\n\n\n::: call-out note We have 2 parameters that we could offer for the interactive view in shiny\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(clust6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 8\n $ groups      : num [1:63] 6 6 2 2 6 2 6 6 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:14] 56 63 52 60 44 38 24 14 30 22 ...\n  .. ..$ edge: num [1:13, 1:3] 52 52 38 44 38 24 63 63 63 52 ...\n  .. ..$ ssw : num 91.5\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 3 6 31 54 55 27 4 40 62 49 ...\n  .. ..$ edge: num [1:10, 1:3] 54 3 3 3 6 54 55 3 55 31 ...\n  .. ..$ ssw : num 70.3\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 9 10\n  .. ..$ edge: num [1, 1:3] 9 10 3.8\n  .. ..$ ssw : num 3.8\n  ..$ :List of 3\n  .. ..$ node: num 39\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 42\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num [1:34] 25 15 43 20 28 36 41 61 7 58 ...\n  .. ..$ edge: num [1:33, 1:3] 41 28 8 8 29 58 21 61 20 45 ...\n  .. ..$ ssw : num 343\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 672\n $ ssw         : num [1:6] 672 610 571 547 526 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:63] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nccs6 <- clust6$groups\nccs6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 6 6 2 2 6 2 6 6 3 3 6 6 6 1 6 6 6 1 6 6 6 1 1 1 6 2 2 6 6 1 2 6 6 6 1 6 1 1\n[39] 4 2 6 5 6 1 6 6 6 6 2 6 6 1 6 2 2 1 6 6 6 1 6 2 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vn_sp, border=gray(.5))\nplot(clust6, \n     coordinates(vn_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n```\n\n::: {.cell-output-display}\n![](the03_files/figure-html/unnamed-chunk-34-1.png){width=1920}\n:::\n:::\n\n\n::: call-out note Since we are doing our individual module analysis, we need to prepare some data for the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat <- dist(slt_vn, method = 'euclidean')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups <- as.factor(cutree(hclust_ward, k=6))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvn_cluster <- cbind(vn, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n```\n:::\n\n\n::: call-out note Take note that the above 4 chunks of code might be duplicated in other modules.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups_mat <- as.matrix(clust6$groups)\nvn_spatialcluster <- cbind(vn_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(vn_spatialcluster, \"SP_CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](the03_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhclust.map <- qtm(vn_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(vn_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n```\n\n::: {.cell-output-display}\n![](the03_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n# 3.0 Storyboard UI\n\n## 3.1 Introduction\n\nThe purpose of this dashboard is to provide a visual representation of the clustering of provinces in Vietnam based on the Provincial Competitiveness Index (PCI) data. The clustering is done using the SKATER method, which is a spatial clustering method that takes into account the spatial relationships between provinces.\n\n## 3.2 Purpose\n\nWe strive to provide a user-friendly interface that allows users to interact with the data and explore the clusters in an intuitive way. The dashboard will include visualizations of the clusters on a map, as well as summary statistics of the clusters. Users will be able to change the number of clusters, the distance metric, and the agglomeration method used in the clustering process. This will aid the analysis of geographic segmentation of the provinces in Vietnam.\n\nSince we are targeting a non-technical audience, we aim to keep the dashboard simple and easy to use. The dashboard will be designed to be visually appealing and intuitive, with clear instructions on how to use it. However, jargon like \"agglomeration\" will be used to identify specific variable changes.\n\n## User Interface\n\n![](images/th3ui.jpg)\n\nAs of now, there'll be 3 parameters that the user can change:\n\n1\\) The number of clusters\n\n2\\) The distance metric\n\n3\\) The agglomeration method.\n\nThis is to give the user more control over the clustering process.\n\n## 3.3 Further development\n\nThe 2 main sources that we will use to create the UI are the `shiny` and `shinydashboard` packages. The `shiny` package is used to create the UI and the `shinydashboard` package is used to create the dashboard layout.\n\nWe can find information about shiny UI designing in the following link: https://shiny.rstudio.com/articles/layout-guide.html\n\nAdditional resources:\n\n1\\) https://shiny.posit.co/\n\n2\\) https://rstudio.github.io/cheatsheets/html/shiny.html?\\_gl=1*17a3ps8*\\_ga*MTAxMjM5NDEwMS4xNzA0NjM3NDA2*\\_ga_2C0WZ1JHG0\\*MTcxMDMxNzc1NS43LjEuMTcxMDMxNzg4OS4wLjAuMA..\n\n3\\) https://deanattali.com/blog/building-shiny-apps-tutorial/#11-using-uioutput-to-create-ui-elements-dynamically\n\n## 3.4 Features to consider\n\nThings that we could potentially look into:\n\n1\\) Adding a map to the UI that shows the clusters\n\n2\\) Adding a table that shows the provinces and their respective clusters\n\n3\\) Allow users to change the level of clustering (i.e. from province to district level)\n\n4\\) Allow users to change the variables that are used for clustering\n\n5\\) Allow users to change the color of the clusters for better visuals\n",
    "supporting": [
      "the03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}