---
title: "Take home Exercise 01"
execute: 
  warning: false # show warnings
  eval: true # evaluate the code
  echo: true # show the code
date: "`r Sys.Date()`"
---

# Take home Exercise 1

## Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore

## 1) Introduction

Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.

In Singapore, one of the important source of data related to human mobility is from Land Transport Authority (LTA) DataMall. Two data sets related to human mobility are provided by the portal, they are: Passenger Volume by Origin Destination Train Stations and Passenger Volume by Origin Destination Bus Stops. One of the limitation of these data sets is that their location are biased to either bus stops or MRT/LRT stations. In 2020, another very interesting human mobility data set called Grab Posisi was released by GRAB, one of the largest shared taxi operator in South-east Asia. There are two data sets been released and one of them is for Singapore.

## 2) Data

## 3) Install and load packages

```{r}
pacman:: p_load (arrow, lubridate, tidyverse, tmap, sf, raster, spatstat, tmap,maptools)
```

## 4) Import data

## 4.1) Import Grab Posisi data

```{r}
#| eval: false
df <- read_parquet("data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet")
```

## 4.2) Import Singapore Master Plan 2019 Subzone Boundary (No Sea) data

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MPSZ-2019")
```

## 4.3) Import Road data set from OpenStreetMap

```{r}
#| eval: false
roads_sf <- st_read(dsn = "data", 
                layer = "gis_osm_roads_free_1")
```

## 5) Data preparation

## 5.1 Handle invalid data

```{r}
#| eval: false
# the st_is_valid function checks whether a geometry is valid
# which returns the indices of certain values based on logical conditions
# length returns the length of data objects
length(which(st_is_valid(mpsz_sf) == FALSE))
```

```{r}
#| eval: false

length(which(st_is_valid(roads_sf) == FALSE))
```

There are 6 invalid geometries in mpsz_sf and 0 invalid geometry in roads_sf.

```{r}
#| eval: false
mpsz_sf <- st_make_valid(mpsz_sf)
length(which(st_is_valid(mpsz_sf) == FALSE))
```

## 5.2 convert mpsz_sf into 3414

```{r}
#| eval: false

st_crs(mpsz_sf)
```

```{r}
#| eval: false
mpsz_sf <- st_transform(mpsz_sf,3414)

```

```{r}
#| eval: false

st_crs(mpsz_sf)
```

## 5.2) convert roads_sf into 3414

```{r}
#| eval: false

st_crs(roads_sf)
```

```{r}
#| eval: false

roads_sf_3414 <- st_transform(roads_sf,3414)
```

```{r}
#| eval: false

roads_sf_3414 <- transform(roads_sf, crs = 3414)

```

```{r}
#| eval: false

st_crs(roads_sf_3414)
```

## 5.3) storing data in rds for future use

Also because my laptop is terrible

```{r}
#| eval: false

write_rds(mpsz_sf, "data/rds/mpsz.rds")
write_rds(roads_sf_3414, "data/rds/roads_sf.rds")
```

## 5.5) Data preparation for GrabPosisi data

### 5.5.1) conver the data type of pingtimestamp from character to date-time

```{r}
#| eval: false
df$pingtimestamp <- as_datetime(df$pingtimestamp)
```

### 5.5.2) extracting trip starting locations

```{r}
#| eval: false

origin_df <- df %>%  
  group_by(trj_id) %>% # group by trip id
  arrange(pingtimestamp) %>% # arrange by pingtimestamp to sort the data
  filter(row_number() == 1) %>% # get the first row of all the trip id
  mutate(weekday = wday(pingtimestamp, label = TRUE, abbr = TRUE), # get the day of the week
         start_hr = factor(hour(pingtimestamp)),# use factor to get ordinal data
         day= factor(day(pingtimestamp)))
```

### 5.5.3) extracting trip ending locations

```{r}
#| eval: false

destination_df <- df %>%  
  group_by(trj_id) %>% # group by trip id
  arrange(desc(pingtimestamp)) %>%  # arrange descending by pingtimestamp to sort the data
  filter(row_number() == 1) %>% # get the last row of all the trip id
  mutate(weekday = wday(pingtimestamp, label = TRUE, abbr = TRUE), # get the day of the week
         end_hr = factor(hour(pingtimestamp)),# use factor to get ordinal data
         day= factor(day(pingtimestamp)))
```

### 5.5.4) storing GrabPosisi data for future use

```{r}
#| eval: false
write_rds(origin_df, "data/rds/origin_df.rds")
write_rds(destination_df, "data/rds/destination_df.rds")

```

## 5.6) Load data from rds

```{r}
origin_df <- read_rds("data/rds/origin_df.rds")
destination_df <- read_rds("data/rds/destination_df.rds")
mpsz <- read_rds("data/rds/mpsz.rds")
roads <- read_rds("data/rds/roads_sf.rds")
bus_stop <- read_rds("data/rds/bus_stop.rds")
```

```{r}
BS <- st_read(dsn = "data/BusStopLocation", 
                layer = "BusStop")
```

```{r}
bus_stop <- BS['BUS_ROOF_N']
```

```{r}
bus_stop <- st_transform(bus_stop,3414)
```

```{r}
st_crs(bus_stop)
```

```{r}
write_rds(bus_stop, "data/rds/bus_stop.rds")

```


filter roads
```{r}
f_road <- filter(roads, maxspeed > 0)
```


```{r}
# tm_shape(mpsz$geometry)+
#  tm_polygons()+
#  tm_shape(origin_sf)+
#  tm_dots()
```
convert aspatial to geospatial 
```{r}
origin_sf <- st_as_sf(origin_df,
                      coords = c("rawlng", "rawlat"),
                      crs = 4326) %>%
  st_transform(crs = 3414)
```


```{r}
# tm_shape(mpsz)+
#  tm_polygons()+
#  tm_shape(f_road)+
#  tm_lines(size=0.2, col="red")
#  tm_shape(origin_df)+
#  tm_dots(alpha=0.4, size = 0.05, col = "blue")
```


we plot the origin of grab trips to singapore map to determine the distribution of grab trips in singapore
```{r}
tmap_mode("view")
tm_shape(mpsz)+
  tm_polygons()+
  tm_text("PLN_AREA_N", size=0.5)+
  tm_shape(origin_sf)+
  tm_dots(alpha=0.4, size = 0.05, col = "blue")
```

```{r}
sg_sf <- mpsz %>%
  st_union()
```

```{r}
plot(sg_sf)
```

lets prep for KDE 

convert sf to sp cos some packages limited to sp 
```{r}
sg <- as(sg_sf, "Spatial")
mpsz_spc <- as(mpsz, "Spatial")
orgin <- as(origin_sf, "Spatial")
```

converting spatial class into generic spatial objects  

```{r}
origin_sp <- as(origin_sf, "Spatial")
sg_sp <- as(sg, "SpatialPolygons")
```

converting generic sp format into spatstat ppp format 

```{r}
origin_ppp <- as(origin_sp["pingtimestamp"], "ppp")
origin_ppp
```

convert origin_sf to spatial object

```{r}
plot(origin_ppp)
```

```{r}
any(duplicated(origin_ppp))

```

```{r}
tmap_mode('view')
tm_shape(origin_sf) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
sg_owin <- as(sg_sp, "owin")

```

```{r}
plot(sg_owin)

```

```{r}
originSG_ppp = origin_ppp[sg_owin]
```

```{r}
# plot origin without legend 
plot(originSG_ppp, legend = FALSE)
```

kde 

```{r}
kde_originSG_bw <- density(originSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_originSG_bw)
```
rescale 

```{r}
kde_originSG_bw_rescale <- rescale(kde_originSG_bw, 1000, "km")
```

```{r}
bw <- bw.diggle(originSG_ppp)
bw
```


replot
```{r}
# kde_originSG_bw_rescale <- density(kde_originSG_bw_rescale,
#                              sigma=bw,
#                              edge=TRUE,
#                            kernel="gaussian") 
# plot(kde_originSG_bw_rescale)
```

```{r}
```


















